{"version":3,"sources":["components/PathLayer.js","components/MarkerLayer.jsx","scripts/utils.js","components/Annotations.jsx","components/Map.js","components/WayPointList.jsx","App.js","reportWebVitals.js","index.js"],"names":["PathLayer","props","useMapEvents","mousemove","e","activePath","setCurrentLatLong","latlng","lat","lng","Polyline","pathOptions","color","positions","waypoints","length","currentLatLong","MarkerLayer","click","setWaypoints","setActivePath","contextmenu","renderedWaypoints","map","coords","index","Marker","position","alt","metersToMiles","meters","undefined","Error","isNaN","Number","Annotations","runningTotal","renderedDistances","d","latlong1","latlong2","Array","isArray","radian1","Math","PI","radian2","latDelta","longDelta","a","sin","cos","c","atan2","sqrt","round","latLongDistance","displayVal","toFixed","opacity","latLngBounds","getCenter","Tooltip","offset","direction","permanent","setTotalDistance","displayTotal","Map","MapContainer","center","zoom","style","height","width","TileLayer","attribution","url","WayPointList","listItems","point","className","App","useState","totalDistance","setcurrentLatLong","onClick","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8853e81.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Polyline, useMapEvents} from \"react-leaflet\";\nconst PathLayer = (props) =>{\n\n    const pathOptions = { color: 'blue' }\n    const lastBranchOptions = { color: 'green' }\n\n    //The mouse position - used while we're placing a new marker.\n    // const [currentPosition, setCurrentPosition] = useState([]);\n    \n    const map = useMapEvents({\n        mousemove(e) {\n            if(props.activePath) {\n                //Let's only change the mouse position if we're setting a path.\n                // setCurrentPosition([e.latlng.lat,e.latlng.lng]);\n                props.setCurrentLatLong([e.latlng.lat,e.latlng.lng]);\n            }\n        }\n    });\n\n    return <div>\n        <Polyline pathOptions={pathOptions} positions={props.waypoints} />\n        {props.waypoints.length > 0 && \n         props.currentLatLong.length > 0 && \n         props.activePath && \n            <Polyline pathOptions={lastBranchOptions} \n                positions={[props.waypoints[props.waypoints.length - 1], props.currentLatLong]} \n            />\n        }\n    </div>\n    \n}\nexport default PathLayer;","import {Marker, Tooltip, useMapEvents} from 'react-leaflet'\n\nconst MarkerLayer = (props) => {\n    \n    const map = useMapEvents({\n        click(e) {   \n            if(props.activePath) {\n                props.setWaypoints([...props.waypoints,[e.latlng.lat, e.latlng.lng]])\n            }else{\n                props.setActivePath(true);\n            }\n            \n        },\n        contextmenu(e) {\n            if(props.activePath) {\n                props.setActivePath(false);\n            }\n        }\n    });\n\n    const renderedWaypoints = props.waypoints.map((coords,index) => {\n        return <Marker key={coords[0]} position={coords} alt={index} />\n      });\n\n      return <div>{renderedWaypoints}</div>;\n}\n\nexport default MarkerLayer;","/* \nlatLongDistance - Takes two lat/long values and returns distance in whole meters\nUsage: \nlet distance = latLongDistance([39.8528, -75.1638],[39.8528, -75.2638]);\n\nArguments: \nlatlong1 - An array consisting of 2 numerical values. Latitude, then longitude.\nlatlong2 - An array consisting of 2 numerical values. Latitude, then longitude. \n\nNote: Formula is based off of that found at https://www.movable-type.co.uk/scripts/latlong.html\n*/\n\nconst latLongDistance = (latlong1, latlong2) => {\n    if( latlong1 == undefined || \n        latlong2 == undefined || \n        latlong1.length !== 2 || \n        latlong2.length !== 2 ||\n        Array.isArray(latlong1) == false ||\n        Array.isArray(latlong2) == false        \n    ) {\n        \n        throw new Error(`latLongDistance call is Missing Arguments`);\n    }\n\n    if( isNaN(Number(latlong1[0])) ||\n        isNaN(Number(latlong1[1])) ||\n        isNaN(Number(latlong2[0])) ||\n        isNaN(Number(latlong2[1]))        \n    ) {\n        throw new Error('latLongDistance call has Invalid arguments');\n    }\n\n    //Actual calculation:\n    const radian1 = latlong1[0] * Math.PI/180;\n    const radian2 = latlong2[0] * Math.PI/180;\n    \n    const latDelta = (latlong1[0] - latlong2[0]) * Math.PI/180;\n    const longDelta = (latlong1[1] - latlong2[1]) * Math.PI/180;\n\n    const a = Math.sin(latDelta/2) * Math.sin(latDelta/2) + // Square the Sine\n              Math.cos(radian1) * Math.cos(radian2) * \n              Math.sin(longDelta/2) * Math.sin(longDelta/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return Math.round(6371e3 * c); //The distance in meters.\n}\n\n/* \nmetersToMiles - Takes meters returns distance in miles.\nUsage: \nlet miles = metersToMiles(1000);\n\nArguments: \nmeters - A number of SI meters.\n\n*/\nconst metersToMiles = (meters) => {\n\n    if(meters == undefined) {\n        throw new Error(\"Please provide a value to convert\");\n    }\n\n    if(isNaN(Number(meters))) {\n        throw new Error(\"Input must be numeric\");\n    }\n\n\n    //Convert meters to feet:\n    let feet = meters * 3.281;\n    const miles = feet/5280;\n\n    return miles;\n}\n\nexport {latLongDistance, metersToMiles};","import {Marker, Tooltip} from 'react-leaflet';\nimport { latLngBounds} from 'leaflet';\nimport {latLongDistance, metersToMiles} from '../scripts/utils';\n\n\nfunction Annotations(props) {\n\n  let runningTotal = 0;\n\n  //This will need to map between each point.\n  if(props.waypoints.length > 1) {\n\n    const renderedDistances = props.waypoints.map((coords,index) => {\n      \n      if(props.waypoints[index+1] != undefined) {\n        const d = latLongDistance(props.waypoints[index], props.waypoints[index+1]);\n        runningTotal += d;\n\n        const displayVal = `${metersToMiles(d).toFixed(2)} mi`;\n\n        return <Marker opacity=\"0\"  position={latLngBounds([props.waypoints[index], props.waypoints[index+1]]).getCenter()}>\n            <Tooltip offset={[-20,25]} direction=\"false\" permanent>{displayVal}</Tooltip>\n          </Marker>\n      }  \n    });\n\n    props.setTotalDistance(metersToMiles(runningTotal));\n    const displayTotal = `${metersToMiles(runningTotal).toFixed(2)} mi`;\n\n    return <div>{renderedDistances}\n        <Marker opacity=\"0\"  position={[\n            props.waypoints[props.waypoints.length-1][0], \n            props.waypoints[props.waypoints.length-1][1] \n          ]}>\n          <Tooltip offset={[-20,25]} direction=\"false\" permanent>Total:<br/>{displayTotal}</Tooltip>\n        </Marker>\n    </div>\n  }else{\n    return \"Nothing to see here\";\n  }\n}\n\nexport default Annotations;","import { MapContainer, TileLayer} from 'react-leaflet'\n\nimport PathLayer from './PathLayer';\nimport MarkerLayer from './MarkerLayer';\nimport Annotations from './Annotations';\n\nfunction Map(props) {\n\n    const mapStyles = {\n        height: \"400px\",\n        width: \"600px\"\n    }\n    const attribution = \" © OpenStreetMap contributors\";\n    const tiles = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    const mapCenter = [45.498045, -122.667901];//[39.9528, -75.1638];\n    const zoomLevel = 10;  \n    \n    return <div>  \n    <MapContainer center={mapCenter} zoom={zoomLevel} style={mapStyles}>\n        <TileLayer\n            attribution={attribution}\n            url={tiles}\n        />\n        \n        <MarkerLayer \n            waypoints={props.waypoints} \n            setWaypoints={props.setWaypoints} \n            activePath={props.activePath} \n            setActivePath={props.setActivePath} \n        />\n        <PathLayer waypoints={props.waypoints} activePath={props.activePath} currentLatLong={props.currentLatLong} setCurrentLatLong={props.setCurrentLatLong}/>\n        <Annotations waypoints={props.waypoints} setTotalDistance={props.setTotalDistance} />\n    </MapContainer>            \n</div>\n}\n\nexport default Map;","\nconst WayPointList = props => {\n\n    const listItems = props.waypoints.map(point=>{\n        return <li className=\"waypoint-item\">\n            <div>Lat: {point[0]}</div>\n            <div>Long: {point[1]}</div>\n        </li>;\n    })\n\n    return <ol className=\"waypoint-list\">\n        {listItems}\n    </ol>\n}\n\nexport default WayPointList;","import './App.css';\nimport Map from './components/Map';\nimport WayPointList from './components/WayPointList';\nimport {useState} from 'react';\n\nfunction App() {\n\n  const [waypoints,setWaypoints] = useState([]);\n  const [activePath,setActivePath] = useState(false);\n  const [totalDistance, setTotalDistance] = useState(0);\n  const [currentLatLong, setcurrentLatLong] = useState([]);\n\n  const clearPoints = () => {\n    setWaypoints([]);\n  }\n\n  const instructions = ()=>{\n    if(activePath) {\n      return <div>Use the left Mouse button to add points to a path. Use the right button to stop</div>\n    }else{\n      return <div>Click on the left mouse button to enter path setting mode</div>\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      Welcome to Mapper\n\n    <div className=\"wrapper\">\n    {instructions()}\n      <div>\n        <Map \n          waypoints={waypoints} \n          setWaypoints={setWaypoints} \n          activePath={activePath} \n          setActivePath={setActivePath} \n          totalDistance={totalDistance}\n          setTotalDistance={setTotalDistance}\n          setCurrentLatLong={setcurrentLatLong}\n          currentLatLong={currentLatLong}\n        />\n        <div className=\"instructions\">\n          <button onClick={clearPoints}>Clear Points</button>\n        </div>\n\n        \n      </div>\n      <div >\n        <WayPointList waypoints={waypoints}/>\n        \n      </div>\n      <div class=\"stats-wrapper\">\n          <div><b>Current Latitude: </b> {currentLatLong[0]}˚</div>\n          <div><b>Current Longitude: </b> {currentLatLong[1]}˚</div>\n          <div><b>Total Distance: </b> {totalDistance.toFixed(2)} mi</div>\n        </div>\n              \n    </div> \n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}